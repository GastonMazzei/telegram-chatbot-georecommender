#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This program is dedicated to the public domain under the CC0 license.

"""
script para mostrarle al empleador venezolano que se puede manejar data geografica!
"""
import pandas as pd
import logging
from telegram.ext import Updater, CommandHandler, MessageHandler,Filters, InlineQueryHandler
import requests, json
# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

data = pd.read_csv('ve.csv')

def start(update, context):
    """Send a message when the command /start is issued."""
    print('user said: ', update.message.text)
    resp = 'Bienvenido! Al enviar tus coordenadas, te dira '\
           'que ciudad te queda mas cerca y cual te queda mas lejos! '\
        'y si supiera por ejemplo'\
     ' donde esta el medico mas cercano pues te deberia dar su numero!'
    update.message.reply_text(resp)
    print('you answered: ',resp)

def help_command(update, context):
    """Send a message when the command /help is issued."""
    print('user said: ', update.message.text)
    resp = 'Version de prueba para un BOT que responde que ciudad'\
    ' esta mas cerca y cual esta mas lejos de tu ubicacion. Deberia responder'\
     ' con la ciudad en la que te encuentras, pero no las tiene todas cargadas!'
    update.message.reply_text(resp)
    print('you answered: ',resp)
    return

def newfunc(update,context):
    def stuff_2(update,context):
        try:
            mssg = update.message.text
            print('user said: ',mssg)
            response = 'El texto se responde siempre igual... aqui deberiamos averiguar '\
            'que tipo de medico necesita para realizar la busqueda!'
            
            update.message.reply_text(response)
            print('you answered: ',response)
        except Exception as ins: 
            print(ins.args)
        return
    def stuff(update,context,x,y):
        result = data.loc[abs(data['lat']-x) + abs(data['lng']-y)  == 
              min(abs(data['lat']-x) + abs(data['lng']-y))]
        city_near = result['city'].values[0]
        result = data.loc[abs(data['lat']-x) + abs(data['lng']-y)  == 
              max(abs(data['lat']-x) + abs(data['lng']-y))]
        city_far = result['city'].values[0]    
        response = f'La ciudad mas cercana es {city_near}!'\
                      f'\nLa ciudad mas lejana es {city_far}!'
        print(f'gonna respond with: {response}')
        try: 
            update.message.reply_text(response)
            print(f'user successfully said: ',response)
        except Exception as ins:
            print(ins.args)   
        return     


    try:
        x = update.message.location.latitude
        y = update.message.location.longitude
        print('arrived here successfully!')
        stuff(update,context,x,y)
        return
    except Exception as ins: 
        #print('user didnt send a location or did and there was a problem!')
        #print(ins.args)
        stuff_2(update,context)
        return
    return


def main():
    """Start the bot."""
    TOKEN = 0#
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    #dp.add_handler(MessageHandler(Filters.text, echo))
    #dp.add_handler(MessageHandler(Filters.location, location))
    dp.add_handler(MessageHandler(Filters.all, newfunc))
    updater.start_polling()
    updater.idle()
    #dp.add_handler(MessageHandler(Filters.text , time,pass_job_queue=True))
    #dp.add_handler(CommandHandler('start2', callback_timer, pass_job_queue=True))
    #dp.add_handler(CommandHandler('stop', stop_timer, pass_job_queue=True))
    #creo
    #job_queue.run_repeating(func_extra, 5, context=update)
    return

if __name__ == '__main__':
    main()





import sys
sys.exit(1)

def echo(update, context):
    """Echo the user message."""
    try:
        mssg = update.message.text
        print('user said: ',mssg)
    except Exception as ins: 
        print(ins.args,'problem with user message')
    response = """
    El texto se responde siempre igual... aqui deberiamos averiguar
    que tipo de medico necesita para realizar la busqueda!
    """
    update.message.reply_text(response)
    print('you answered: ',response)
    #url = 'http://photon.komoot.de/api/?q='
    #if False:
    #    resp = requests.get(url=url+userinput)
    #    data = json.loads(resp.text)
    #    [x,y] = data['features'][0]['geometry']['coordinates']
    #    answer = f'Tus coordenadas son {x} , {y}'
    #    update.message.reply_text(answer)
    #    print('you answered: ',answer)
    #else: pass 
    return

def location(update,context):
    """Echo the user message."""
    try:
        x = update.message.location.latitude
        y = update.message.location.longitude
    except Exception as ins: 
        print('user sent location and there was a problem!')
        print(ins.args)
        return
    result = data.loc[abs(data['lat']-x) + abs(data['lng']-y)  == 
              min(abs(data['lat']-x) + abs(data['lng']-y))]
    city_near = result['city'].values[0]
    result = data.loc[abs(data['lat']-x) + abs(data['lng']-y)  == 
              max(abs(data['lat']-x) + abs(data['lng']-y))]
    city_far = result['city'].values[0]    
    update.message.reply_test(f'La ciudad mas cercana es {city_near}!'/
            f'\nLa ciudad mas lejana es {city_far}!')
    print(f'user said: La ciudad mas cercana es {city_near}!'/
            f'\nLa ciudad mas lejana es {city_far}!')
    return

#----------------------------------------------------------------------ATTEMPT1
#def sayhi(bot, job):
#    job.context.message.reply_text("hi")
#    return
#def time(bot, update,job_queue):
#    job = job_queue.run_repeating(sayhi, 5, context=update)
#    return	
#------------------------------------------------------------------------attempt2
#def callback_alarm(bot, job):
#    bot.send_message(chat_id=job.context, text='Alarm')
#def callback_timer(bot, update, job_queue):
#    bot.send_message(chat_id=update.message.chat_id,
#                      text='Starting!')
#    job_queue.run_repeating(callback_alarm, 5, context=update.message.chat_id)
#def stop_timer(bot, update, job_queue):
#    bot.send_message(chat_id=update.message.chat_id,
#                      text='Stoped!')
#    job_queue.stop()
#----------------------------------------------------------------------------------------
