#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This program is dedicated to the public domain under the CC0 license.

"""
Script to Compute the closest csv entry to a user using Telegram :-)
"""

import pandas as pd
import logging
from telegram.ext import Updater, CommandHandler, MessageHandler,Filters, InlineQueryHandler
import requests, json

from PREDEFINED_COMMUNICATION import *

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

data = pd.read_csv('database.csv')

def start(update, context):
    """Send a message when the command /start is issued."""
    print('user said: ', update.message.text)
    update.message.reply_text(WELCOME_MESSAGE)
    print('you answered: ',resp)

def help_command(update, context):
    """Send a message when the command /help is issued."""
    print('user said: ', update.message.text)
    update.message.reply_text(HELP_MESSAGE)
    print('you answered: ',resp)
    return

def newfunc(update,context):
    def stuff_2(update,context):
        try:
            mssg = update.message.text
            print('user said: ',mssg) 
            update.message.reply_text(ANSWER_MESSAGE)
            print('you answered: ',response)
        except Exception as ins: 
            print(ins.args)
        return
    def stuff(update,context,x,y):
        result = data.loc[abs(data['lat']-x) + abs(data['lng']-y)  == 
              min(abs(data['lat']-x) + abs(data['lng']-y))]
        city_near = result['city'].values[0]
        result = data.loc[abs(data['lat']-x) + abs(data['lng']-y)  == 
              max(abs(data['lat']-x) + abs(data['lng']-y))]
        city_far = result['city'].values[0] 

        # ****************CUSTOM MESSAGE GOES HERE**********
        response = f'Closest city is {city_near}!'\
                      f'\nFurthest city is {city_far}!'
        # ****************CUSTOM MESSAGE ENDS HERE**********
        print(f'gonna respond with: {response}')
        try: 
            update.message.reply_text(response)
            print(f'user successfully said: ',response)
        except Exception as ins:
            print(ins.args)   
        return     


    try:
        x = update.message.location.latitude
        y = update.message.location.longitude
        print('arrived here successfully!')
        stuff(update,context,x,y)
        return
    except Exception as ins: 
        #print('user didnt send a location or did and there was a problem!')
        #print(ins.args)
        stuff_2(update,context)
        return
    return


def main():
    """Start the bot."""
    TOKEN = 0#
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(MessageHandler(Filters.all, newfunc))
    updater.start_polling()
    updater.idle()
    return

if __name__ == '__main__':
    main()





import sys
sys.exit(1)

def echo(update, context):
    """Echo the user message."""
    try:
        mssg = update.message.text
        print('user said: ',mssg)
    except Exception as ins: 
        print(ins.args,'problem with user message')
    response = """
    El texto se responde siempre igual... aqui deberiamos averiguar
    que tipo de medico necesita para realizar la busqueda!
    """
    update.message.reply_text(response)
    print('you answered: ',response)
    return

def location(update,context):
    """Echo the user message."""
    try:
        x = update.message.location.latitude
        y = update.message.location.longitude
    except Exception as ins: 
        print('user sent location and there was a problem!')
        print(ins.args)
        return
    result = data.loc[abs(data['lat']-x) + abs(data['lng']-y)  == 
              min(abs(data['lat']-x) + abs(data['lng']-y))]
    city_near = result['city'].values[0]
    result = data.loc[abs(data['lat']-x) + abs(data['lng']-y)  == 
              max(abs(data['lat']-x) + abs(data['lng']-y))]
    city_far = result['city'].values[0]    
    update.message.reply_test(f'La ciudad mas cercana es {city_near}!'/
            f'\nLa ciudad mas lejana es {city_far}!')
    print(f'user said: La ciudad mas cercana es {city_near}!'/
            f'\nLa ciudad mas lejana es {city_far}!')
    return

